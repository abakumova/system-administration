- name: Dnf install
  ansible.builtin.dnf:
    name: [ 'nfs-utils', 'samba', 'samba-common', 'samba-client', 'cifs-utils', ]
    state: latest

- name: Create /lab8/fs-ext4 directory
  file:
    path: /lab8/fs-ext4
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Create /lab8/fs-xfs directory
  file:
    path: /lab8/fs-xfs
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Create /shares/nfs directory
  file:
    path: /shares/nfs
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Add entry to /etc/exports
  lineinfile:
    path: /etc/exports
    line: "/shares/nfs 127.0.0.1(rw,no_root_squash)"
    state: present
    insertafter: EOF
  notify: Restart NFS

- name: Create /mnt/nfs directory
  file:
    path: /mnt/nfs
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Create /shares/samba directory
  file:
    path: /shares/samba
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Create two logical partitions on /dev/sdb
  community.general.parted:
    device: /dev/sdb
    number: '{{ item.number }}'
    state: present
    part_type: "{{ item.part_type }}"
    part_start: '{{ item.start }}'
    part_end: '{{ item.end }}'
  with_items:
    - number: 1
      part_type: extended
      start: 2048s
      end: 2097151s
    - number: 5
      part_type: logical
      start: 4096s
      end: 1048574s
    - number: 6
      part_type: logical
      start: 1050624s
      end: 2097151s

- name: Create EXT4 and XFS filesystems on /dev/sdb5 and /dev/sdb6
  community.general.filesystem:
    fstype: "{{ item.fstype }}"
    state: present
    dev: "{{ item.dev }}"
    opts: "{{ item.opts }}"
  with_items:
    - dev: /dev/sdb5
      fstype: ext4
      opts: -L lab8FSext4
    - dev: /dev/sdb6
      fstype: xfs
      opts: -L lab8FSxfs

- name: Mount EXT4 and XFS filesystems
  ansible.posix.mount:
    src: "{{ item.src }}"
    path: "{{ item.path }}"
    fstype: "{{ item.fstype }}"
    state: mounted
    with_items:
      - src: /dev/sdb5
        path: /lab8/fs-ext4
        fstype: ext4
      - src: /dev/sdb6
        path: /lab8/fs-xfs
        fstype: xfs

#    - name: Pause to mount NFS filesystem
#      pause:
#        prompt: "Press [Enter] to continue..."

- name: Mount nfs filesystem
  ansible.posix.mount:
    src: "{{hostname}}.{{domain_name}}:/shares/nfs"
    path: /mnt/nfs
    fstype: nfs
    state: mounted

- name: Create SAMBA group
  ansible.builtin.group:
    name: samba_group
    state: present

- name: Add scoring and centos users to SAMBA group
  user:
    name: "{{ item }}"
    groups: samba_group
    append: yes
  with_items:
    - scoring
    - centos

- name: Add scoring and centos users to SMB
  shell: printf "{{ item.pass }}\n{{ item.pass }}" | smbpasswd -a -s {{ item.user }}
  register: output
  changed_when: '"Added user" in output.stdout'
  with_items:
    - user: centos
      pass: smb_pass.centos
    - user: scoring
      pass: smb_pass.scoring

- name: Change mode of /shares/samba directory
  file:
    path: /shares/samba
    state: directory
    mode: '0755'
    owner: root
    group: samba_group
    recurse: yes

- name: Sefcontext samba_share_t
  sefcontext:
    target: '/shares/samba'
    setype: samba_share_t
    state: present

- name: Add SMB block to /etc/samba/smb.conf configuration file
  copy:
    src: smb.conf
    dest: /etc/samba/smb.conf
    owner: root
    group: root
    mode: '0644'
  notify:
    - Restart SMB service

- name: Set Samba passwords for each user
  shell: "printf '{{ item.passwd }}\n{{ item.passwd }}\n' | smbpasswd -s -a {{ item.name }}"
  register: output
  changed_when: '"Added user" in output.stdout'
  with_items:
    - name: "{{ samba_name }}"
      passwd: "{{ key_value_password }}"

- name: /usr/local/bin/consul kv put object/{{ hostname }} {{ key_value_password }}
  shell: /usr/local/bin/consul kv put object/{{ hostname }} "{{ key_value_password }}"

#- name: Pause to add a configured host
#  pause:
#    prompt: "Press [Enter] to continue..."

- name: Download MinIO Client
  get_url:
    url: https://dl.min.io/client/mc/release/linux-amd64/mc
    dest: "/usr/bin/mc"
    owner: root
    mode: '0755'
    group: root

- name: Check mc command
  command: mc --help
  register: mc_output
  ignore_errors: true

#- name: Add a configured host
#  shell: mc config host add scoring {{ scoring_site }} #{{ hostname }} {{ key_value_password }}

- name: Add a configured host
  expect:
    command: mc config host add scoring {{ scoring_site }}
    responses:
      "Enter Access Key:": "{{ hostname }}"
      "Enter Secret Key:": "{{ key_value_password }}"
  become: true

- name: Create bucket
  shell: mc mb scoring/{{ hostname }}
  register: output
  changed_when: '"Bucket created successfully" in output.stdout'
  ignore_errors: true

- name: Create scoringtestfile
  lineinfile:
    path: /tmp/scoringtestfile
    line: "{{ hostname }}"
    state: present
    create: yes

- name: Copy local file to remote bucket
  shell: mc cp /tmp/scoringtestfile scoring/{{ hostname }}/scoringtestfile
